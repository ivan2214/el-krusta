// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  admin          Boolean?
  sessions       Session[]
  accounts       Account[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Burguer {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  titulo       String
  descripcion  String
  precio       Int
  descuento    Int
  rating       Float?
  pictures     Picture[]
  categorias   Categoria[]
  ingredientes Ingrediente[]
  reviews      Review[]
}

model Picture {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  src       String
  alt       String
  burguer   Burguer @relation(fields: [burguerId], references: [id])
  burguerId String  @db.ObjectId
}

model Categoria {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  nombre    String
  burguer   Burguer? @relation(fields: [burguerId], references: [id])
  burguerId String?  @db.ObjectId
}

model Ingrediente {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  nombre    String
  burguer   Burguer? @relation(fields: [burguerId], references: [id])
  burguerId String?  @db.ObjectId
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  comentario String
  estrellas  Int
  burguer    Burguer? @relation(fields: [burguerId], references: [id])
  burguerId  String?  @db.ObjectId
}
